name: Build Sysroot

on:
  workflow_call:
    inputs:
      target_arch:
        description: 'Target architecture (e.g. arm64, amd64, x86_64)'
        required: true
        type: string

      distro:
        description: 'Target distribution (e.g. debian/bullseye, alpine/v3.18)'
        required: true
        type: string

      mirror_url:
        description: 'Custom mirror URL (optional)'
        required: false
        type: string
        default: ''

      sysroot_path:
        description: 'Output sysroot path'
        required: false
        type: string
        default: './sysroot'

      additional_packages:
        description: 'Comma-separated list of additional packages to install'
        required: false
        type: string
        default: ''

      docker_image:
        description: 'Docker image to use as job container (optional, auto-detect if empty)'
        required: false
        type: string
        default: ''

      artifact_name:
        description: 'Fully custom artifact name (optional, overrides prefix/postfix)'
        required: false
        type: string
        default: ''

      artifact_prefix:
        description: 'Artifact name prefix (optional)'
        required: false
        type: string
        default: 'sysroot'

      artifact_postfix:
        description: 'Artifact name postfix (optional)'
        required: false
        type: string
        default: ''

    outputs:
      docker_image:
        description: "The docker image selected for building sysroot"
        value: ${{ jobs.select-image.outputs.docker_image }}
      artifact_name:
        description: "The result artifact name"
        value: ${{ jobs.build-sysroot.outputs.artifact_name }}

jobs:
  select-image:
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.select-image.outputs.docker_image }}
    steps:
      - name: Determine Docker Image
        id: select-image
        run: |
          DISTRO="${{ inputs.distro }}"
          IMAGE="${{ inputs.docker_image }}"

          if [ -z "$IMAGE" ]; then
            case "$DISTRO" in
              debian/*)
                IMAGE="${DISTRO/\/*/:latest}";;
              ubuntu/*)
                IMAGE="${DISTRO/\/*/:latest}";;
              alpine/*)
                IMAGE="${DISTRO/\/v/:}";;
              *)
                echo "Unsupported distro for auto image, please provide docker_image explicitly."
                exit 1;;
            esac
          fi

          echo "docker_image=$IMAGE" >> $GITHUB_OUTPUT

  build-sysroot:
    needs: select-image
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.select-image.outputs.docker_image }}
      options: --privileged

    outputs:
      artifact_name: ${{ steps.set-artifact-name.outputs.artifact_name }}

    steps:
      - name: Install required tools
        shell: sh
        run: |
          DISTRO="${{ inputs.distro }}"
          if [[ "$DISTRO" == alpine/* ]]; then
            apk add --no-cache bash tar
          else
            apt-get update && apt-get install -y bash
          fi

      - name: Generate Cache Key
        id: cache-key
        shell: bash
        run: |
          ARCH="${{ inputs.target_arch }}"
          DISTRO="${{ inputs.distro }}"
          ADDPKG="${{ inputs.additional_packages }}"

          SAFE_DISTRO=${DISTRO//\//_}
          SAFE_ADDPKG=${ADDPKG//,/_}

          SAFE_CACHE_KEY="sysroot-${ARCH}-${SAFE_DISTRO}-${SAFE_ADDPKG}"

          echo "cache_key=$SAFE_CACHE_KEY" >> $GITHUB_OUTPUT

      - name: Restore sysroot from cache
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ inputs.sysroot_path }}
          key: ${{ steps.cache-key.outputs.cache_key }}

      - name: Check if sysroot exists
        id: sysroot-check
        shell: bash
        run: |
          if [ -d "${{ inputs.sysroot_path }}/bin" ]; then
            echo "Sysroot already exists. Skipping build."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install QEMU for cross-arch
        if: steps.sysroot-check.outputs.exists == 'false'
        shell: bash
        run: |
          if command -v apt-get >/dev/null 2>&1; then
            apt-get update && apt-get install -y qemu-user-static binfmt-support
          elif command -v apk >/dev/null 2>&1; then
            apk add --no-cache qemu
          else
            echo "Unsupported base image package manager"
            exit 1
          fi

      - name: Register QEMU
        if: steps.sysroot-check.outputs.exists == 'false'
        shell: bash
        run: |
          update-binfmts --enable qemu-arm || true
          update-binfmts --enable qemu-aarch64 || true

      - name: Set default mirror URL
        id: set_mirror
        if: steps.sysroot-check.outputs.exists == 'false'
        shell: bash
        run: |
          MIRROR="${{ inputs.mirror_url }}"
          DISTRO="${{ inputs.distro }}"
          ARCH="${{ inputs.target_arch }}"

          if [ -z "$MIRROR" ]; then
            case "$DISTRO" in
              debian/*)
                MIRROR="http://deb.debian.org/debian";;
              ubuntu/*)
                if [[ "$ARCH" == "amd64" || "$ARCH" == "i386" ]]; then
                  MIRROR="http://archive.ubuntu.com/ubuntu"
                else
                  MIRROR="http://ports.ubuntu.com/ubuntu-ports"
                fi;;
              alpine/*)
                MIRROR="http://dl-cdn.alpinelinux.org/alpine/${DISTRO#alpine/}/main";;
              *)
                echo "Unknown distro for auto mirror, please specify mirror_url explicitly"
                exit 1;;
            esac
          fi
          echo "mirror_url=$MIRROR" >> $GITHUB_OUTPUT

      - name: Install required tools
        if: steps.sysroot-check.outputs.exists == 'false'
        shell: bash
        run: |
          DISTRO="${{ inputs.distro }}"
          if [[ "$DISTRO" == alpine/* ]]; then
            apk add --no-cache wget tar
          else
            apt-get update && apt-get install -y debootstrap qemu-user-static binfmt-support
          fi

      - name: Bootstrap sysroot
        if: steps.sysroot-check.outputs.exists == 'false'
        shell: bash
        run: |
          ARCH="${{ inputs.target_arch }}"
          DISTRO="${{ inputs.distro }}"
          SYSROOT="$(realpath ${{ inputs.sysroot_path }})"
          MIRROR="${{ steps.set_mirror.outputs.mirror_url }}"
          ADDPKGS="${{ inputs.additional_packages }}"
          DISTRO_VER="${DISTRO#*/}"

          mkdir -p "$SYSROOT"

          if [[ "$DISTRO" == alpine/* ]]; then
            BASE_URL="$MIRROR"
            apk -U --allow-untrusted -X ${BASE_URL} --arch $ARCH --root $SYSROOT --initdb add alpine-base

            if [ -n "$ADDPKGS" ]; then
              apk -U --allow-untrusted -X ${BASE_URL} --arch $ARCH --root $SYSROOT add $(echo "$ADDPKGS" | tr ',' ' ')
            fi
          else
            if [ -n "$ADDPKGS" ]; then
              debootstrap --foreign --arch=$ARCH --include=$ADDPKGS $DISTRO_VER $SYSROOT $MIRROR
            else
              debootstrap --foreign --arch=$ARCH $DISTRO_VER $SYSROOT $MIRROR
            fi
          fi

      - name: Determine Artifact Name
        id: set-artifact-name
        shell: bash
        run: |
          ARCH="${{ inputs.target_arch }}"
          DISTRO="${{ inputs.distro }}"
          ADDPKG="${{ inputs.additional_packages }}"

          SAFE_DISTRO=${DISTRO//\//_}
          SAFE_ADDPKG=${ADDPKG//,/_}

          if [ -n "${{ inputs.artifact_name }}" ]; then
            ARTIFACT_NAME="${{ inputs.artifact_name }}"
          else
            ARTIFACT_NAME="${{ inputs.artifact_prefix }}$ARCH-$SAFE_DISTRO${{ inputs.artifact_postfix }}"
          fi

          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Upload sysroot artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.artifact_name }}
          path: |
            ${{ inputs.sysroot_path }}
            !${{ inputs.sysroot_path }}/dev
            !${{ inputs.sysroot_path }}/proc
