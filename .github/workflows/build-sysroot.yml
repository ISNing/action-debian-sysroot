name: Build Sysroot

on:
  workflow_call:
    inputs:
      target_arch:
        description: 'Target architecture (e.g. arm64, amd64, x86_64)'
        required: true
        type: string

      distro:
        description: 'Target distribution (e.g. debian/bullseye, alpine/v3.18)'
        required: true
        type: string

      mirror_url:
        description: 'Custom mirror URL (optional)'
        required: false
        type: string
        default: ''

      sysroot_path:
        description: 'Output sysroot path'
        required: false
        type: string
        default: './sysroot'

      additional_packages:
        description: 'Comma-separated list of additional packages to install'
        required: false
        type: string
        default: ''

      artifact_name:
        description: 'Fully custom artifact name (optional, overrides prefix/postfix)'
        required: false
        type: string
        default: ''

      artifact_prefix:
        description: 'Artifact name prefix (optional)'
        required: false
        type: string
        default: 'sysroot'

      artifact_postfix:
        description: 'Artifact name postfix (optional)'
        required: false
        type: string
        default: '.tar.gz'

      exclude:
        description: 'Files/Directories to be excluded from compressing (optional)'
        required: false
        type: string
        default: 'dev proc var home root run sys tmp'

      apk_static_url:
        description: 'Custom apk.static binary url (optional, required for alpine targets)'
        required: false
        type: string
        default: 'https://gitlab.alpinelinux.org/api/v4/projects/5/packages/generic/v2.14.10/x86_64/apk.static'

      ignore_cache:
        description: 'Whether to ignore cache'
        required: false
        type: boolean
        default: false

      enable_cache:
        description: 'Whether to enable cache'
        required: false
        type: boolean
        default: true

      restore_key:
        description: 'Custom restore key pattern'
        required: false
        type: string
        default: 'sysroot-${ARCH}-${SAFE_DISTRO}-${SAFE_ADDPKGS}-${SAFE_EXCLUDE}-git${GITHUB_SHA:0-7}'

      cache_key:
        description: 'Custom cache key pattern'
        required: false
        type: string
        default: '${RESTORE_KEY}-$(date +"%Y%m%d")'

    outputs:
      artifact_name:
        description: "The result artifact name"
        value: ${{ jobs.build-sysroot.outputs.artifact_name }}

jobs:
  build-sysroot:
    runs-on: ubuntu-latest

    env:
      ARCH: ${{ inputs.target_arch }}
      DISTRO: ${{ inputs.distro }}
      ADDPKGS: ${{ inputs.additional_packages }}
      SYSROOT: ${{ inputs.sysroot_path }}
      MIRROR: ${{ inputs.mirror_url }}
      EXCLUDE: ${{ inputs.exclude }}

    defaults:
      run:
        shell: bash

    outputs:
      artifact_name: ${{ steps.set-artifact-name.outputs.artifact_name }}

    steps:
      - name: Prepare environment variables required
        id: init-env
        run: |
          DISTRO_VER="${DISTRO#*/}"
          SAFE_DISTRO="${DISTRO//\//_}"
          SAFE_ADDPKGS="${ADDPKGS//,/_}"
          SAFE_EXCLUDE="${EXCLUDE// /_}"

          echo "DISTRO_VER=$DISTRO_VER" >> $GITHUB_ENV
          echo "SAFE_DISTRO=$SAFE_DISTRO" >> $GITHUB_ENV
          echo "SAFE_ADDPKGS=$SAFE_ADDPKGS" >> $GITHUB_ENV
          echo "SAFE_EXCLUDE=$SAFE_EXCLUDE" >> $GITHUB_ENV

      - name: Generate Cache Key
        id: cache-key
        run: |
          RESTORE_KEY=${{ inputs.restore_key }}
          CACHE_KEY=${{ inputs.cache_key }}
          echo "CACHE_KEY=$CACHE_KEY" >> $GITHUB_ENV
          echo "RESTORE_KEY=$RESTORE_KEY" >> $GITHUB_ENV
          echo "cache_key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "restore_key=$RESTORE_KEY" >> $GITHUB_OUTPUT

      - name: Restore sysroot from cache
        id: cache
        uses: actions/cache@v4
        if: inputs.enable_cache
        with:
          path: ${{ inputs.sysroot_path }}
          key: ${{ steps.cache-key.outputs.cache_key }}
          lookup-only: ${{ inputs.ignore_cache }}
          restore-keys: ${{ steps.cache-key.outputs.restore_key }}

      - name: Set default mirror URL
        id: set_mirror
        if: ${{ inputs.ignore_cache || steps.cache.outputs.cache-hit != 'true' }}
        run: |
          if [ -z "$MIRROR" ]; then
            case "$DISTRO" in
              debian/*)
                MIRROR="http://deb.debian.org/debian";;
              ubuntu/*)
                if [[ "$ARCH" == "amd64" || "$ARCH" == "i386" ]]; then
                  MIRROR="http://azure.archive.ubuntu.com/ubuntu"
                else
                  MIRROR="http://azure.ports.ubuntu.com/ubuntu-ports"
                fi;;
              alpine/*)
                MIRROR="http://dl-cdn.alpinelinux.org/alpine/${DISTRO#alpine/}/main";;
              *)
                echo "Unknown distro for auto mirror, please specify mirror_url explicitly"
                exit 1;;
            esac
          fi

          echo "MIRROR=$MIRROR" >> $GITHUB_ENV
          echo "mirror_url=$MIRROR" >> $GITHUB_OUTPUT

      - name: apt-get update
        if: ${{ inputs.ignore_cache || steps.cache.outputs.cache-hit != 'true' }}
        run: sudo apt-get update

      - name: Prepare for QEMU user mode emulator
        if: ${{ inputs.ignore_cache || steps.cache.outputs.cache-hit != 'true' }}
        run: sudo apt-get install -y qemu-user-static

      - name: Prepare required tools for debian targets
        if: ${{ inputs.ignore_cache || steps.cache.outputs.cache-hit != 'true'  && ! startsWith(inputs.distro, 'alpine')}}
        run: sudo apt-get install -y debootstrap tar

      - name: Prepare required tools for alpine targets
        if: ${{ inputs.ignore_cache || steps.cache.outputs.cache-hit != 'true'  && startsWith(inputs.distro, 'alpine')}}
        working-directory: /tmp
        run: |
          sudo wget -O /bin/apk ${{ inputs.apk_static_url }}
          sudo chmod a+x /bin/apk

      - name: Prepare bootstrapping sysroot
        if: ${{ inputs.ignore_cache || steps.cache.outputs.cache-hit != 'true' }}
        run: |
          mkdir -p "$SYSROOT"

      - name: Bootstrap sysroot (debian targets)
        if: ${{ inputs.ignore_cache || steps.cache.outputs.cache-hit != 'true'  && ! startsWith(inputs.distro, 'alpine')}}
        run: |
          if [ -n "$ADDPKGS" ]; then
            sudo debootstrap --variant=minbase --merged-usr --no-check-gpg --arch=$ARCH --include=$ADDPKGS $DISTRO_VER $SYSROOT $MIRROR
          else
            sudo debootstrap --variant=minbase --merged-usr --no-check-gpg --arch=$ARCH $DISTRO_VER $SYSROOT $MIRROR
          fi

      - name: Bootstrap sysroot (alpine targets)
        if: ${{ inputs.ignore_cache || steps.cache.outputs.cache-hit != 'true' && startsWith(inputs.distro, 'alpine')}}
        run: |
          sudo apk -U --allow-untrusted -X ${MIRROR} --arch $ARCH --root $SYSROOT --initdb add alpine-base

          if [ -n "$ADDPKGS" ]; then
            sudo apk -U --allow-untrusted -X ${MIRROR} --arch $ARCH --root $SYSROOT add $(echo "$ADDPKGS" | tr ',' ' ')
          fi

      - name: Remove unused directories
        if: ${{ inputs.ignore_cache || steps.cache.outputs.cache-hit != 'true' }}
        working-directory: ${{ inputs.sysroot_path }}
        run: sudo rm -rf $EXCLUDE

      - name: Mark all sysroot artifact readable for everyone
        if: ${{ inputs.ignore_cache || steps.cache.outputs.cache-hit != 'true' }}
        run: sudo chmod a+r -R ${{ inputs.sysroot_path }}

      - name: Determine Artifact Name
        id: set-artifact-name
        run: |
          if [ -n "${{ inputs.artifact_name }}" ]; then
            ARTIFACT_NAME="${{ inputs.artifact_name }}"
          else
            ARTIFACT_NAME="${{ inputs.artifact_prefix }}$ARCH-$SAFE_DISTRO${{ inputs.artifact_postfix }}"
          fi

          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Compress sysroot artifact
        run: tar czvf "${{ steps.set-artifact-name.outputs.artifact_name }}" -C "$(realpath ${{ inputs.sysroot_path }})" $(ls ${{ inputs.sysroot_path }})

      - name: Upload sysroot artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.artifact_name }}
          path: ${{ steps.set-artifact-name.outputs.artifact_name }}
